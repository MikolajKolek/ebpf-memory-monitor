[package]
name = "ebpf-memory-monitor"
version = "0.1.0"
edition.workspace = true
license.workspace = true

[dependencies]
ebpf-memory-monitor-common = { path = "../ebpf-memory-monitor-common", features = ["user"] }
anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-obj = { workspace = true }
nix = { workspace = true }
# Only used for constants
libc = { workspace = true }

[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.ctrlc = "3.4.7"
rlimit-fentry = { path = "../rlimit-fentry" }
rlimit-kprobe = { path = "../rlimit-kprobe" }
hiwater-fentry = { path = "../hiwater-fentry" }
hiwater-kprobe = { path = "../hiwater-kprobe" }

[lib]
name = "ebpf_memory_monitor"
path = "src/lib.rs"
